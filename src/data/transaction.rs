use fake::Dummy;

#[derive(Debug, Clone, Dummy)]
// dai -100 i vari v
// max
// 172792.0
// 2.45492999121121
// 22.0577289904909
// 9.38255843282114
// 16.8753440335975
// 34.8016658766686
// 73.3016255459646
// 120.589493945238
// 20.0072083651213
// 15.5949946071278
// 23.7451361206545
// 12.0189131816199
// 7.8483920756446
// 7.12688295859376
// 10.5267660517847
// 8.87774159774277
// 17.3151115176278
// 9.25352625047285
// 5.04106918541184
// 5.59197142733558
// 39.4209042482199
// 27.2028391573154
// 10.5030900899454
// 22.5284116897749
// 4.58454913689817
// 7.51958867870916
// 3.5173456116238
// 31.6121981061363
// 33.8478078188831
// 25691.16
pub struct Transaction {
    #[dummy(faker = "-100.0..=100.0")]
    v1: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v2: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v3: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v4: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v5: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v6: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v7: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v8: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v9: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v10: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v11: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v12: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v13: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v14: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v15: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v16: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v17: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v18: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v19: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v20: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v21: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v22: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v23: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v24: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v25: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v26: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v27: f64,
    #[dummy(faker = "-100.0..=100.0")]
    v28: f64,
    #[dummy(faker = "0.0..=200000.0")]
    pub time: f64,
    #[dummy(faker = "0.0..=30000.0")]
    pub amount: f64,
}

impl TryFrom<Vec<f64>> for Transaction {
    type Error = ();

    fn try_from(v: Vec<f64>) -> Result<Self, Self::Error> {
        if v.len() < 30 {
            Err(())
        } else {
            Ok(Self {
                v1: v[0],
                v2: v[1],
                v3: v[2],
                v4: v[3],
                v5: v[4],
                v6: v[5],
                v7: v[6],
                v8: v[7],
                v9: v[8],
                v10: v[9],
                v11: v[10],
                v12: v[11],
                v13: v[12],
                v14: v[13],
                v15: v[14],
                v16: v[15],
                v17: v[16],
                v18: v[17],
                v19: v[18],
                v20: v[19],
                v21: v[20],
                v22: v[21],
                v23: v[22],
                v24: v[23],
                v25: v[24],
                v26: v[25],
                v27: v[26],
                v28: v[27],
                time: v[28],
                amount: v[29],
            })
        }
    }
}

impl From<Transaction> for Vec<f64> {
    fn from(t: Transaction) -> Self {
        vec![
            t.v1, t.v2, t.v3, t.v4, t.v5, t.v6, t.v7, t.v8, t.v9, t.v10, t.v11, t.v12, t.v13,
            t.v14, t.v15, t.v16, t.v17, t.v18, t.v19, t.v20, t.v21, t.v22, t.v23, t.v24, t.v25,
            t.v26, t.v27, t.v28, t.time, t.amount,
        ]
    }
}
